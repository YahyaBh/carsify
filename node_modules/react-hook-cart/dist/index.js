Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

var generateCartState = function (currentCartState, items) {
    var totalUniqueItems = calculateUniqueItems(items);
    var isEmpty = totalUniqueItems === 0;
    return __assign(__assign({}, currentCartState), { items: calculateItemTotals(items), totalItems: calculateTotalItems(items), totalUniqueItems: totalUniqueItems, totalCost: calculateCartTotal(items), isEmpty: isEmpty });
};
var calculateItemTotals = function (items) {
    return items.map(function (item) { return (__assign(__assign({}, item), { itemTotal: item.price * item.quantity })); });
};
var calculateTotalItems = function (items) {
    return items.reduce(function (sum, item) { return sum + item.quantity; }, 0);
};
var calculateCartTotal = function (items) {
    return items.reduce(function (total, item) { return total + item.quantity * item.price; }, 0);
};
var calculateUniqueItems = function (items) { return items.length; };
var cartReducer = function (state, action) {
    switch (action.type) {
        case "ADD_ITEM": {
            var items = __spreadArrays(state.items, [action.payload.item]);
            return generateCartState(state, items);
        }
        case "UPDATE_ITEM": {
            var items = state.items.map(function (item) {
                if (item.id !== action.payload.idToUpdate)
                    return item;
                return __assign(__assign({}, item), action.payload.item);
            });
            return generateCartState(state, items);
        }
        case "REMOVE_ITEM": {
            var items = state.items.filter(function (item) { return item.id !== action.payload.idToRemove; });
            return generateCartState(state, items);
        }
        case "CLEAR_CART":
            return __assign({}, action.payload.initialCartState);
    }
};

// Credit: "Easy to understand React Hook recipes by Gabe Ragland"
function useLocalStorage(key, initialValue) {
    // State to store our value
    // Pass initial state function to useState so logic is only executed once
    var _a = React.useState(function () {
        try {
            // Get from local storage by key
            var item = window.localStorage.getItem(key);
            // Parse stored json or if none return initialValue
            return item ? JSON.parse(item) : initialValue;
        }
        catch (error) {
            // If error also return initialValue
            console.log(error);
            return initialValue;
        }
    }), storedValue = _a[0], setStoredValue = _a[1];
    // Return a wrapped version of useState's setter function that ...
    // ... persists the new value to localStorage.
    var setValue = function (value) {
        try {
            // Allow value to be a function so we have same API as useState
            var valueToStore = value instanceof Function ? value(storedValue) : value;
            // Save state
            setStoredValue(valueToStore);
            // Save to local storage
            window.localStorage.setItem(key, JSON.stringify(valueToStore));
        }
        catch (error) {
            // A more advanced implementation would handle the error case
            console.log(error);
        }
    };
    return [storedValue, setValue];
}

var createContext = React.createContext, useContext = React.useContext, useReducer = React.useReducer, useEffect = React.useEffect;
var initialState = {
    items: [],
    isEmpty: true,
    totalItems: 0,
    totalUniqueItems: 0,
    totalCost: 0,
};
var CartContext = createContext(initialState);
var useCart = function () {
    // This makes sure that the cart functions are always
    var context = useContext(CartContext);
    if (!context)
        throw new Error("Expected to be wrapped in a CartProvider");
    return context;
};
var CartProvider = function (_a) {
    var children = _a.children, _b = _a.storage, storage = _b === void 0 ? useLocalStorage : _b;
    var _c = storage("react-use-cart", JSON.stringify(__assign({}, initialState))), savedCart = _c[0], saveCart = _c[1];
    var _d = useReducer(cartReducer, JSON.parse(savedCart)), cartState = _d[0], dispatchCartState = _d[1];
    useEffect(function () {
        saveCart(JSON.stringify(cartState));
    }, [cartState, saveCart]);
    var addItem = function (item, quantity) {
        if (quantity === void 0) { quantity = 1; }
        if (quantity < 1)
            return;
        if (item.id === undefined)
            throw new Error("Item object must have an \"id\" property.");
        if (item.price === undefined)
            throw new Error("Item object must have a \"price\" property.");
        var currentItem = cartState.items.find(function (i) { return i.id === item.id; });
        if (currentItem) {
            var payload = {
                item: __assign(__assign({}, item), { quantity: currentItem.quantity + quantity }),
                idToUpdate: item.id,
            };
            dispatchCartState({
                type: "UPDATE_ITEM",
                payload: payload,
            });
        }
        else {
            var payload = { item: __assign(__assign({}, item), { quantity: quantity }) };
            dispatchCartState({ type: "ADD_ITEM", payload: payload });
        }
    };
    var removeItem = function (id) {
        dispatchCartState({ type: "REMOVE_ITEM", payload: { idToRemove: id } });
    };
    var updateItem = function (id, updates) {
        var currentItem = cartState.items.find(function (item) { return item.id === id; });
        if (!currentItem)
            throw new Error("No Item with that id in Items array.");
        var item = __assign(__assign({}, currentItem), updates);
        dispatchCartState({
            type: "UPDATE_ITEM",
            payload: { item: item, idToUpdate: id },
        });
    };
    var updateItemQuantity = function (id, quantity) {
        if (quantity <= 0) {
            dispatchCartState({ type: "REMOVE_ITEM", payload: { idToRemove: id } });
            return;
        }
        var currentItem = cartState.items.find(function (item) { return item.id === id; });
        if (!currentItem)
            throw new Error("No Item with that id in Items array.");
        var item = __assign(__assign({}, currentItem), { quantity: quantity });
        dispatchCartState({
            type: "UPDATE_ITEM",
            payload: { item: item, idToUpdate: id },
        });
    };
    var clearCart = function () {
        var payload = { initialCartState: initialState };
        dispatchCartState({ type: "CLEAR_CART", payload: payload });
    };
    var getItem = function (id) {
        return cartState.items.find(function (item) { return item.id === id; });
    };
    var inCart = function (id) {
        return cartState.items.some(function (item) { return item.id === id; });
    };
    return (React.createElement(CartContext.Provider, { value: __assign(__assign({}, cartState), { addItem: addItem,
            removeItem: removeItem,
            updateItem: updateItem,
            updateItemQuantity: updateItemQuantity,
            clearCart: clearCart,
            getItem: getItem,
            inCart: inCart }) }, children));
};

exports.CartProvider = CartProvider;
exports.useCart = useCart;
//# sourceMappingURL=index.js.map
