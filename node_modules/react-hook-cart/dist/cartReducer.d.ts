export interface Item {
    id: string;
    price: number;
    quantity?: number;
    itemTotal?: number;
    [key: string]: any;
}
export interface InitialState {
    items: Item[];
    isEmpty: boolean;
    totalItems: number;
    totalUniqueItems: number;
    totalCost: number;
}
export interface CartState extends InitialState {
    addItem: (item: Item, quantity?: number) => void;
    removeItem: (id: Item["id"]) => void;
    updateItem: (id: Item["id"], item: object) => void;
    updateItemQuantity: (id: Item["id"], quantity: number) => void;
    clearCart: () => void;
    getItem: (id: Item["id"]) => Item | undefined;
    inCart: (id: Item["id"]) => boolean;
}
export declare type Actions = {
    type: "ADD_ITEM";
    payload: {
        item: Item;
    };
} | {
    type: "REMOVE_ITEM";
    payload: {
        idToRemove: Item["id"];
    };
} | {
    type: "UPDATE_ITEM";
    payload: {
        item: Item;
        idToUpdate: Item["id"];
    };
} | {
    type: "CLEAR_CART";
    payload: {
        initialCartState: InitialState;
    };
};
export declare const cartReducer: (state: CartState, action: Actions) => CartState | InitialState;
