{"ast":null,"code":"import _defineProperty from \"C:/Users/Administrator/Desktop/carsify/carsify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport merge from '../merge';\nimport getThemeValue, { propToStyleFunction } from '../getThemeValue';\nimport { handleBreakpoints, createEmptyBreakpointObject, removeUnusedBreakpoints } from '../breakpoints';\n\nfunction objectsHaveSameKeys() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  var allKeys = objects.reduce(function (keys, object) {\n    return keys.concat(Object.keys(object));\n  }, []);\n  var union = new Set(allKeys);\n  return objects.every(function (object) {\n    return union.size === Object.keys(object).length;\n  });\n}\n\nfunction callIfFn(maybeFn, arg) {\n  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;\n}\n\nfunction styleFunctionSx(props) {\n  var _ref = props || {},\n      styles = _ref.sx,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? {} : _ref$theme;\n\n  if (!styles) {\n    return null;\n  }\n\n  var stylesObject = styles;\n\n  if (typeof styles === 'function') {\n    stylesObject = styles(theme);\n  } else if (typeof styles !== 'object') {\n    // value\n    return styles;\n  }\n\n  var emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);\n  var breakpointsKeys = Object.keys(emptyBreakpoints);\n  var css = emptyBreakpoints;\n  Object.keys(stylesObject).forEach(function (styleKey) {\n    var value = callIfFn(stylesObject[styleKey], theme);\n\n    if (typeof value === 'object') {\n      if (propToStyleFunction[styleKey]) {\n        css = merge(css, getThemeValue(styleKey, value, theme));\n      } else {\n        var breakpointsValues = handleBreakpoints({\n          theme: theme\n        }, value, function (x) {\n          return _defineProperty({}, styleKey, x);\n        });\n\n        if (objectsHaveSameKeys(breakpointsValues, value)) {\n          css[styleKey] = styleFunctionSx({\n            sx: value,\n            theme: theme\n          });\n        } else {\n          css = merge(css, breakpointsValues);\n        }\n      }\n    } else {\n      css = merge(css, getThemeValue(styleKey, value, theme));\n    }\n  });\n  return removeUnusedBreakpoints(breakpointsKeys, css);\n}\n\nstyleFunctionSx.filterProps = ['sx'];\nexport default styleFunctionSx;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/carsify/carsify/node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js"],"names":["merge","getThemeValue","propToStyleFunction","handleBreakpoints","createEmptyBreakpointObject","removeUnusedBreakpoints","objectsHaveSameKeys","objects","allKeys","reduce","keys","object","concat","Object","union","Set","every","size","length","callIfFn","maybeFn","arg","styleFunctionSx","props","styles","sx","theme","stylesObject","emptyBreakpoints","breakpoints","breakpointsKeys","css","forEach","styleKey","value","breakpointsValues","x","filterProps"],"mappings":"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","sourcesContent":["import merge from '../merge';\nimport getThemeValue, { propToStyleFunction } from '../getThemeValue';\nimport { handleBreakpoints, createEmptyBreakpointObject, removeUnusedBreakpoints } from '../breakpoints';\n\nfunction objectsHaveSameKeys(...objects) {\n  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n}\n\nfunction callIfFn(maybeFn, arg) {\n  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;\n}\n\nfunction styleFunctionSx(props) {\n  const {\n    sx: styles,\n    theme = {}\n  } = props || {};\n\n  if (!styles) {\n    return null;\n  }\n\n  let stylesObject = styles;\n\n  if (typeof styles === 'function') {\n    stylesObject = styles(theme);\n  } else if (typeof styles !== 'object') {\n    // value\n    return styles;\n  }\n\n  const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);\n  const breakpointsKeys = Object.keys(emptyBreakpoints);\n  let css = emptyBreakpoints;\n  Object.keys(stylesObject).forEach(styleKey => {\n    const value = callIfFn(stylesObject[styleKey], theme);\n\n    if (typeof value === 'object') {\n      if (propToStyleFunction[styleKey]) {\n        css = merge(css, getThemeValue(styleKey, value, theme));\n      } else {\n        const breakpointsValues = handleBreakpoints({\n          theme\n        }, value, x => ({\n          [styleKey]: x\n        }));\n\n        if (objectsHaveSameKeys(breakpointsValues, value)) {\n          css[styleKey] = styleFunctionSx({\n            sx: value,\n            theme\n          });\n        } else {\n          css = merge(css, breakpointsValues);\n        }\n      }\n    } else {\n      css = merge(css, getThemeValue(styleKey, value, theme));\n    }\n  });\n  return removeUnusedBreakpoints(breakpointsKeys, css);\n}\n\nstyleFunctionSx.filterProps = ['sx'];\nexport default styleFunctionSx;"]},"metadata":{},"sourceType":"module"}