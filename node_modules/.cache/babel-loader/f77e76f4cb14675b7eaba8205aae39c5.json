{"ast":null,"code":"import _slicedToArray from \"C:/Users/Administrator/Desktop/carsify/carsify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\"],\n    _excluded2 = [\"colorSchemes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_STORAGE_KEY } from './getInitColorSchemeScript';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar resolveMode = function resolveMode(key, fallback, supportedColorSchemes) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  var value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n\n    if (!supportedColorSchemes.includes(value)) {\n      value = undefined;\n    }\n  } catch (e) {// Unsupported\n  }\n\n  return value || fallback;\n};\n\nexport default function createCssVarsProvider(ThemeContext, options) {\n  var _options$theme = options.theme,\n      baseTheme = _options$theme === void 0 ? {} : _options$theme,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$prefix = options.prefix,\n      designSystemPrefix = _options$prefix === void 0 ? '' : _options$prefix;\n\n  if (!baseTheme.colorSchemes || !baseTheme.colorSchemes[designSystemColorScheme]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n        _ref$theme = _ref.theme,\n        themeProp = _ref$theme === void 0 ? {} : _ref$theme,\n        _ref$prefix = _ref.prefix,\n        prefix = _ref$prefix === void 0 ? designSystemPrefix : _ref$prefix,\n        _ref$storageKey = _ref.storageKey,\n        storageKey = _ref$storageKey === void 0 ? DEFAULT_STORAGE_KEY : _ref$storageKey,\n        _ref$attribute = _ref.attribute,\n        attribute = _ref$attribute === void 0 ? DEFAULT_ATTRIBUTE : _ref$attribute,\n        _ref$defaultColorSche = _ref.defaultColorScheme,\n        defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche;\n\n    var _baseTheme$colorSchem = baseTheme.colorSchemes,\n        baseColorSchemes = _baseTheme$colorSchem === void 0 ? {} : _baseTheme$colorSchem,\n        restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n        colorSchemesProp = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n        restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    var mergedTheme = deepmerge(restBaseTheme, restThemeProp);\n    var colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    var allColorSchemes = Object.keys(colorSchemes);\n    var joinedColorSchemes = allColorSchemes.join(',');\n\n    var _React$useState = React.useState(function () {\n      return resolveMode(storageKey, defaultColorScheme, allColorSchemes);\n    }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        colorScheme = _React$useState2[0],\n        setColorScheme = _React$useState2[1];\n\n    var resolvedColorScheme = colorScheme || defaultColorScheme;\n\n    var _cssVarsParser = cssVarsParser(mergedTheme, {\n      prefix: prefix\n    }),\n        rootCss = _cssVarsParser.css,\n        rootVars = _cssVarsParser.vars;\n\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      vars: rootVars\n    });\n    var styleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          scheme = _ref3[1];\n\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix: prefix\n      }),\n          css = _cssVarsParser2.css,\n          vars = _cssVarsParser2.vars;\n\n      if (key === resolvedColorScheme) {\n        mergedTheme.vars = _extends({}, mergedTheme.vars, vars);\n      }\n\n      if (key === defaultColorScheme) {\n        styleSheet[':root'] = deepmerge(rootCss, css);\n      } else {\n        styleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(function () {\n      if (colorScheme) {\n        document.body.setAttribute(attribute, colorScheme);\n        localStorage.setItem(storageKey, colorScheme);\n      }\n    }, [colorScheme, attribute, storageKey]); // local storage modified in the context of another document\n\n    React.useEffect(function () {\n      var handleStorage = function handleStorage(event) {\n        var storageColorScheme = event.newValue;\n\n        if (event.key === storageKey && joinedColorSchemes.match(storageColorScheme)) {\n          if (storageColorScheme) {\n            setColorScheme(storageColorScheme);\n          }\n        }\n      };\n\n      window.addEventListener('storage', handleStorage);\n      return function () {\n        return window.removeEventListener('storage', handleStorage);\n      };\n    }, [setColorScheme, storageKey, joinedColorSchemes]);\n    var wrappedSetColorScheme = React.useCallback(function (val) {\n      if (typeof val === 'string' && !allColorSchemes.includes(val)) {\n        console.error(\"`\".concat(val, \"` does not exist in `theme.colorSchemes`.\"));\n      } else {\n        setColorScheme(val);\n      }\n    }, [setColorScheme, allColorSchemes]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        colorScheme: colorScheme,\n        setColorScheme: wrappedSetColorScheme,\n        allColorSchemes: allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeContext.Provider, {\n        value: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * Your component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.string,\n\n    /**\n     * css variable prefix\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    storageKey: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/carsify/carsify/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","React","PropTypes","GlobalStyles","deepmerge","cssVarsParser","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_STORAGE_KEY","jsx","_jsx","jsxs","_jsxs","resolveMode","key","fallback","supportedColorSchemes","window","undefined","value","localStorage","getItem","includes","e","createCssVarsProvider","ThemeContext","options","theme","baseTheme","designSystemColorScheme","defaultColorScheme","prefix","designSystemPrefix","colorSchemes","console","error","ColorSchemeContext","createContext","useColorScheme","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageKey","attribute","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","mergedTheme","allColorSchemes","Object","keys","joinedColorSchemes","join","useState","colorScheme","setColorScheme","resolvedColorScheme","rootCss","css","rootVars","vars","styleSheet","entries","forEach","scheme","useEffect","document","body","setAttribute","setItem","handleStorage","event","storageColorScheme","newValue","match","addEventListener","removeEventListener","wrappedSetColorScheme","useCallback","val","Provider","styles","propTypes","string","node","object"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_STORAGE_KEY } from './getInitColorSchemeScript';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst resolveMode = (key, fallback, supportedColorSchemes) => {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  let value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n\n    if (!supportedColorSchemes.includes(value)) {\n      value = undefined;\n    }\n  } catch (e) {// Unsupported\n  }\n\n  return value || fallback;\n};\n\nexport default function createCssVarsProvider(ThemeContext, options) {\n  const {\n    theme: baseTheme = {},\n    defaultColorScheme: designSystemColorScheme,\n    prefix: designSystemPrefix = ''\n  } = options;\n\n  if (!baseTheme.colorSchemes || !baseTheme.colorSchemes[designSystemColorScheme]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    storageKey = DEFAULT_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultColorScheme = designSystemColorScheme\n  }) {\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = baseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    let mergedTheme = deepmerge(restBaseTheme, restThemeProp);\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const joinedColorSchemes = allColorSchemes.join(',');\n    const [colorScheme, setColorScheme] = React.useState(() => resolveMode(storageKey, defaultColorScheme, allColorSchemes));\n    const resolvedColorScheme = colorScheme || defaultColorScheme;\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      vars: rootVars\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix\n      });\n\n      if (key === resolvedColorScheme) {\n        mergedTheme.vars = _extends({}, mergedTheme.vars, vars);\n      }\n\n      if (key === defaultColorScheme) {\n        styleSheet[':root'] = deepmerge(rootCss, css);\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        document.body.setAttribute(attribute, colorScheme);\n        localStorage.setItem(storageKey, colorScheme);\n      }\n    }, [colorScheme, attribute, storageKey]); // local storage modified in the context of another document\n\n    React.useEffect(() => {\n      const handleStorage = event => {\n        const storageColorScheme = event.newValue;\n\n        if (event.key === storageKey && joinedColorSchemes.match(storageColorScheme)) {\n          if (storageColorScheme) {\n            setColorScheme(storageColorScheme);\n          }\n        }\n      };\n\n      window.addEventListener('storage', handleStorage);\n      return () => window.removeEventListener('storage', handleStorage);\n    }, [setColorScheme, storageKey, joinedColorSchemes]);\n    const wrappedSetColorScheme = React.useCallback(val => {\n      if (typeof val === 'string' && !allColorSchemes.includes(val)) {\n        console.error(`\\`${val}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setColorScheme(val);\n      }\n    }, [setColorScheme, allColorSchemes]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        colorScheme,\n        setColorScheme: wrappedSetColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeContext.Provider, {\n        value: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * Your component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.string,\n\n    /**\n     * css variable prefix\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    storageKey: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}